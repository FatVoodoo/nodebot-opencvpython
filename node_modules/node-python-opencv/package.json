{
  "_args": [
    [
      "node-python-opencv@https://github.com/rlyle78/node-python-opencv/tarball/master",
      "/Users/Ron/nodebots/node-opencvpython"
    ]
  ],
  "_from": "https://github.com/rlyle78/node-python-opencv/tarball/master",
  "_id": "node-python-opencv@1.0.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/node-python-opencv",
  "_phantomChildren": {},
  "_requested": {
    "name": "node-python-opencv",
    "raw": "node-python-opencv@https://github.com/rlyle78/node-python-opencv/tarball/master",
    "rawSpec": "https://github.com/rlyle78/node-python-opencv/tarball/master",
    "scope": null,
    "spec": "https://github.com/rlyle78/node-python-opencv/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/rlyle78/node-python-opencv/tarball/master",
  "_shasum": "ae6a6d0d5ac8850493a677422b8899cf555649da",
  "_shrinkwrap": null,
  "_spec": "node-python-opencv@https://github.com/rlyle78/node-python-opencv/tarball/master",
  "_where": "/Users/Ron/nodebots/node-opencvpython",
  "author": {
    "name": "Grégory Tardivel"
  },
  "bugs": {
    "url": "https://github.com/gr3gdev/node-python-opencv/issues"
  },
  "dependencies": {},
  "description": "Module NodeJS pour la détection de mouvement et la reconnaissance faciale avec python-opencv",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "homepage": "https://github.com/gr3gdev/node-python-opencv#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "node-python-opencv",
  "optionalDependencies": {},
  "readme": "# node-python-opencv\n*Module NodeJS pour python-opencv*\n\nCe module permet d'utiliser les fonctionnalités de opencv via python pour :\n\n- la détection de mouvement\n- la détection et la reconnaissance faciale\n- le streaming d'une webcam\n\n\n## Pré-requis :\n- Installer **Python 2.7**\n- Installer les modules python suivants : \n\t- *python-opencv* (pour Windows compiler opencv-contrib)\n\t- *numpy*\n\n\n## Installation :\n    npm install node-python-opencv\n\n\n## Utilisations :\n**Streaming webcam :**\n\n\tvar opencv = require('node-python-opencv');\n\t\n\t// Numéro de port facultatif\n\tvar webcam = new opencv.webcam({\n\t\tport: 8090\n\t});\n\twebcam.frame(function (image) {\n\t\t// image est au format base64\n\t});\n\n\n**Détection de mouvement entre 2 images :**\n\n    var opencv = require('node-python-opencv');\n\n\tvar image1 = fs.readFileSync('path/image1.jpg', {encoding: 'base64'});\n\tvar image2 = fs.readFileSync('path/image2.jpg', {encoding: 'base64'});\n\n\tvar detector = new opencv.detector({\n\t\tport: 9009\n\t});\n\n\t// Arguments :\n\t// image1 : image de base au format base64\n\t// image2 : image au format base64 où trouver les différences \n\tdetector.findMove({\n\t\t'image1': image1,\n\t\t'image2': image2\n\t}, function (data, err) {\n\t\t// Return JSON object {x: N, y: N, w: N, h: N}\n\t\tconsole.log(JSON.stringify(data));\n\t});\n\n\n**Détection de visage(s) :**\n\n    var opencv = require('node-python-opencv');\n\n\tvar image = fs.readFileSync('path/image.jpg', {encoding: 'base64'});\n\n\tvar detector = new opencv.detector({\n\t\tport: 9009\n\t});\n\n\t// Arguments :\n\t// image : image au format base64 où trouver les visages\n\t// haarcascade : fichier haarcascade à utiliser\n\t// scaleFactor (facultatif) : échelle de redimensionnement de l'image pour la détection\n\t// minNeighbors (facultatif) : Nombre de voisins que chaque rectangle détecté peut conserver \n\tdetector.findFaces({\n\t\t'image': image,\n\t\t'haarcascade': 'path/to/haarcascade_frontalface_default.xml',\n\t\t'scaleFactor': 1.2,\n\t\t'minNeighbors': 8\n\t}, function (data, err) {\n\t\t// Return JSON object {faces: [{x: N, y: N, w: N, h: N}, ...]}\n\t\tconsole.log(JSON.stringify(data));\n\t});\n\n\n**Reconnaissance faciale :**\n\n    var opencv = require('node-python-opencv');\n\n\tvar image = fs.readFileSync('path/image.jpg', {encoding: 'base64'});\n\n\tvar detector = new opencv.detector({\n\t\tport: 9009\n\t});\n\n\t// Arguments :\n\t// csv : base de données d'images à utiliser pour la reconnaissance\n\t// image : image au format base64 où trouver les visages\n\t// haarcascade : fichier haarcascade à utiliser\n\t// scaleFactor (facultatif) : échelle de redimensionnement de l'image pour la détection\n\t// minNeighbors (facultatif) : Nombre de voisins que chaque rectangle détecté peut conserver\n\tdetector.recognizeFaces({\n\t\t'csv': 'path/to/database.csv'\n\t\t'image': image,\n\t\t'haarcascade': 'path/to/haarcascade_frontalface_default.xml'\n\t}, function (data, err) {\n\t\t// Return JSON object {faces: [{name: 'xxx', x: N, y: N, w: N, h: N}, ...]}\n\t\tconsole.log(JSON.stringify(data));\n\t});\n\nExemple de fichier csv pour la reconnaissance faciale (**Attention de bien respecter ce format !**) :\n\n\tLabel;Name;PATH\n\t1;name_person1;/path/to/person1_image1.jpg\n\t1;name_person1;/path/to/person1_image2.jpg\n\t1;name_person1;/path/to/person1_image3.jpg\n\t2;name_person2;/path/to/person2_image1.jpg\n\t2;name_person2;/path/to/person2_image2.jpg\n\t3;name_person3;/path/to/person3_image1.jpg",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gr3gdev/node-python-opencv.git"
  },
  "scripts": {
    "test": "mocha test/*.js"
  },
  "version": "1.0.4"
}
